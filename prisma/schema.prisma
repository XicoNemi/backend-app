// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//? ENUMS *//

enum ItineraryType {
  CULTURAL
  GASTRONOMICO
  ADVENTURA
  RELAX
  FAMILIAR
}

enum CategoryType {
  HOSPEDAJE
  GASTRONOMIA
  EVENTOS
  TURISMO
  ITINERARIOS
  CINE
  OTRO
}

enum StatusEvent {
  ACTIVO
  INACTIVO
}

enum TypeUser {
  COMMON
  ADMIN
}

enum Genre {
  MASCULINO
  FEMENINO
  NO_DEFINIDO
}

enum TypeContent {
  TURISMO
  EVENTOS
  GASTRONOMIA
  HOSPEDAJE
}

//? TABLES *//

//* USUARIO
model User {
  id               Int                @id @default(autoincrement())
  idFacebook       String?
  name             String
  lastname         String
  email            String             @unique
  password         String
  tel              String
  birthday         Int
  genre            Genre?
  image            String?
  type             TypeUser           @default(COMMON)
  travel           Travel?            @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId         Int?
  active           Boolean            @default(false)
  token            String?
  UserHasRoute     UserHasRoute[]
  UserHasItinerary UserHasItinerary[]
}

//* EVENTO
model Event {
  id              Int               @id @default(autoincrement())
  name            String
  startDate       Int
  endDate         Int
  status          StatusEvent
  pointOfInterest pointOfInterest[]
}

//* PUNTO DE INTERES
model pointOfInterest {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  locationId  Int
  eventId     Int?
}

//* PROMOCION
model Promotion {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
}

//* ESTABLECIMIENTO


//* UBICACION
model Location {
  id              Int               @id @default(autoincrement())
  street          String
  lat             String
  lng             String
  pointOfInterest pointOfInterest[]
}

//! RUTA
model Route {
  id                Int                 @id @default(autoincrement())
  data              Json
  UserHasRoute      UserHasRoute[]
  ItineraryHasRoute ItineraryHasRoute[]
}

//* ITINERARIO
model Itinerary {
  id                        Int                         @id @default(autoincrement())
  name                      String
  description               String
  type                      ItineraryType
  UserHasRoute              UserHasRoute[]
  UserHasItinerary          UserHasItinerary[]
  ItineraryHasRoute         ItineraryHasRoute[]
  ItineraryHasEstablishment ItineraryHasEstablishment[]
}

//* RECORRIDO
model Travel {
  id       Int    @id @default(autoincrement())
  name     String
  distance Int
  time     Int
  User     User[]
}

//?  TABLAS DERIVADAS
//* USUARIO TIENE ITINERARIO
model UserHasItinerary {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId Int
}

//* USUARIO TIENE RUTA
model UserHasRoute {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  route       Route?     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId     Int?
  Itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId Int?
}

//* ITINERARIO TIENE RUTA
model ItineraryHasRoute {
  id          Int        @id @default(autoincrement())
  routeId     Int?
  itineraryId Int?
  Route       Route?     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  Itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

//* ITINERARIO TIENE ESTABLECIMIENTO
model ItineraryHasEstablishment {
  id              Int            @id @default(autoincrement())
  itineraryId     Int?
  establishmentId Int?
  Itinerary       Itinerary?     @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

model Content {
  id          Int         @id @default(autoincrement())
  type        TypeContent
  title       String
  description String
  url_logo    String?
}

model Business {
  id              Int               @id @default(autoincrement())
  name            String
  url_logo        String?
  category        CategoryType
  address         String
  tel             String
  web_site        String?
  social_networks Json?
  outstanding     Boolean           @default(false)
}
